<style lang='less'>

</style>
<template>
  <view class='container'>
    <picker value='{{langIndex}}' bindchange='bindSelectLanguage' range='{{lang}}'>
      <!-- <image src='../../images/switch.png' alt='' class='switch' /> -->
    </picker>
    <view class='channel'>
      <view view class='weui-panel weui-panel_access'>
        <repeat for='{{projects}}' key='index' index='id'>
          <!-- <navigator url='../task_detail/index?taskid={{item.id}}'> -->
            <view class='weui-media-box weui-media-box_appmsg' @tap="tapName(id)">
              <view class='weui-media-box__hd'>
                <text class='weui-media-box__thumb'></text>
              </view>
              <view class='weui-media-box__bd'>
                <view class='weui-media-box__title'>{{item.abstract}}</view>
                <view class='weui-media-box__desc'>{{item.id}}</view>
              </view>
              <view class='fr'></view>
            </view>
          <!-- </navigator> -->
        </repeat>
      </view>
    </view>
    <repeat for='{{tests}}' key='index'>
      <view wx:if="{{item.name===undefined || item.name === ''}}">111</view>
      <view wx:if="{{item.name && item.name !== ''}}">222</view>
    </repeat>
    <repeat for='{{TextInputs}}' key='index'>
      <view>
        <input type="text" value="{{wholeInputContents[index] || ''}}" placeholder="{{item}}" bindinput="choiceTextInput({{index}})"  />
      </view>
    </repeat>
    <!-- <toast /> -->
  </view>
</template>

<script>
  import wepy from 'wepy'
  import { connect } from 'wepy-redux'
  import Panel from '@/components/panel' // alias example
  import Counter from 'counter' // alias example
  import List from '../components/list' // aliasFields example
  import moduleA from 'module-a' // aliasFields ignore module example
  import Group from '../components/group'
  import Toast from 'wepy-com-toast'
  import testMixin from '../mixins/test'
  var api = require('../api/api.js');
  // console.log('moduleA ignored: ', moduleA) // => moduleA ignored: {}

  @connect({
    num (state) {
      return state.counter.num
    },
    asyncNum (state) {
      return state.counter.asyncNum
    },
    sumNum (state) {
      return state.counter.num + state.counter.asyncNum
    }
  })

  export default class Index extends wepy.page {
    config = {
      navigationBarTitleText: 'test'
    }
    components = {
      // panel: Panel,
      // counter1: Counter,
      // counter2: Counter,
      // list: List,
      // group: Group,
      // toast: Toast
    }

    // mixins = [testMixin]

    data = {
      projects: [],
      changelangs: [],
      lang: ['中文简体', 'English'],
      langIndex: 0,
      langCode: ['zh', 'en'],
      showData: [],
      jsonData: [{ zh: '首页', en: 'Home' }, { zh: '我的', en: 'Me' }],
      tests:[{age:18}],
      wholeInputContents:[],
      TextInputs: ["年龄","组号","性别","爱好"]
    }

    computed = {

    }

    methods = {
      tapName(e){
        console.log(e)
      },
      choiceTextInput (index,e) {
        this.wholeInputContents[index]=e.detail.value
        for(let i=0;i<this.wholeInputContents.length;i++){
          if(this.wholeInputContents[i]===undefined){
            this.wholeInputContents[i]=''
          }
        }
      }
    }
    filterSopType(tasklist) {
      var tmp = []
      for(var k in tasklist) {
        if (tasklist[k].sopType.indexOf('COLLECT') != -1 ||
          tasklist[k].sopType.indexOf('TEXTTRANS') != -1) {
          tmp.push(tasklist[k])
        }
      }
      return tmp
    }
    getProjects() {
      wepy.request({
        url: api.apiURL() + '/api/projects',
        method: 'GET',
        header: {
          "Content-Type": "application/json;charset=utf-8",
          "Cookie": "gosessionID=84c389f82f3ad09775e251537ba35b6a; Path=/; HttpOnly"
        },
      })
      .then(response => {
        this.projects=this.filterSopType(response.data.projects)
        console.log(this.projects)
      })
    }
    events = {
      'index-emit': (...args) => {
        let $event = args[args.length - 1]
        console.log(`${this.$name} receive ${$event.name} from ${$event.source.$name}`)
      }
    }
    // getData(){
    //   return new Promise((resolve,reject)=>{
    //     setTimeout(() => {
    //       resolve({data:123})
    //     }, 3000);
    //   })
    // }
    async onLoad() {
      // var that = this
      await this.getProjects();
      // let data=await this.getData();
      // console.log(data)
    }
  }
</script>
