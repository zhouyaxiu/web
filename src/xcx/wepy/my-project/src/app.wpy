<style lang="less">
.container {
  height: 100%;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: space-between;
  box-sizing: border-box;
}
</style>

<script>
import wepy from 'wepy'
import 'wepy-async-function'

import { setStore } from 'wepy-redux'
import configStore from './store'

const store = configStore()
setStore(store)

export default class extends wepy.app {
 
  config = {
    pages: [
      'pages/login',
      'pages/register',
      'pages/bind',
      'pages/index',
      'pages/mixin',
      'pages/text',
      'pages/wxs',
      'pages/detail'
    ],
    window: {
      backgroundTextStyle: 'light',
      navigationBarBackgroundColor: '#fff',
      navigationBarTitleText: 'WeChat',
      navigationBarTextStyle: 'black'
    }
  }

  globalData = {
    userInfo: null,
    Sid: '',
    header: {
      "Content-Type": "application/json;charset=utf-8",
      "Cookie": ""
    },
    interceptid:1
  }
 // 拦截器
  constructor () {
    super()
    this.use('requestfix')
    this.use('promisify')
    //onLaunch和constructor写法一样
    this.intercept('request',{
      config(p){
        p.timestamp=+new Date()
        wepy.showToast({title:'正在请求数据中'})
        console.log('config request',p)
        return p
      },
      success(p){
        console.log('config success request',p)
        wepy.showToast({title:'请求成功了'})
        return p
      },
      fail(p){
        wepy.showToast({title:'请求失败了'})
        console.log('config fail request',p)
        return p
      },
    })
  }

  onLaunch() {
    this.testAsync()
    //拦截器
    // this.intercept('request',{
    //   config(p){
    //     if(this.globalData.interceptid===1){
    //       p.timestamp=+new Date()
    //       console.log('config request',p)
    //       return p
    //     }
    //   },
    //   success(p){
    //     console.log('config success request',p)
    //     return p
    //   },
    //   fail(p){
    //     console.log('config fail request',p)
    //     return p
    //   },
    // })
  }

  sleep (s) {
    return new Promise((resolve, reject) => {
      setTimeout(() => {
        resolve('promise resolved')
      }, s * 1000)
    })
  }

  async testAsync () {
    const data = await this.sleep(3)
    console.log(data)
  }

  getUserInfo (cb) {
    const that = this
    if (this.globalData.userInfo) {
      return this.globalData.userInfo
    }
    wepy.getUserInfo({
      success (res) {
        that.globalData.userInfo = res.userInfo
        cb && cb(res.userInfo)
      }
    })
  }

  setSid (sid) {
    this.globalData.Sid = sid
  }

  getSid () {
    return this.globalData.Sid
  }

  setCookie (cookie) {
    this.globalData.header["Cookie"] = cookie
  }

  getCookie () {
    return this.globalData.header["Cookie"]
  }

}
</script>
